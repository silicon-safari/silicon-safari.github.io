[{"author":null,"categories":null,"content":null,"date":1697041800,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1697041800,"objectID":"5fa4539a48a917e0bc49a7aec59b9819","permalink":"http://localhost:1313/posts/replication/","publishdate":"2023-10-11T22:00:00+05:30","readingtime":7,"relpermalink":"/posts/replication/","section":"posts","summary":"Hey everyone, it‚Äôs alanturrr1703 back again with another blog! üòÑ Today, we‚Äôre going to dive into the concept of database replication, a critical technique used to improve the availability, reliability, and performance of distributed systems.\nIf you‚Äôve ever worked with large-scale systems or dealt with high-availability requirements, chances are you‚Äôve come across replication in some form. Let‚Äôs break down the basics and understand how it works.\nWhat is Replication? Replication is the process of copying and maintaining multiple copies of data across different locations, machines, or systems.","tags":null,"title":"Understanding Database Replication: What, Why, and How","type":"posts","url":"/posts/replication/","weight":0,"wordcount":1351},{"author":null,"categories":null,"content":null,"date":1695828600,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1695828600,"objectID":"440415549b7a53f4b919c9459806e761","permalink":"http://localhost:1313/posts/dataserializaiton/","publishdate":"2023-09-27T21:00:00+05:30","readingtime":6,"relpermalink":"/posts/dataserializaiton/","section":"posts","summary":"Hey everyone, it‚Äôs alanturrr1703 back again! üòÅ Today, we‚Äôll be talking about something crucial in modern systems: Data Serialization Frameworks. If you‚Äôre working with distributed systems, microservices, or just handling lots of data in different formats, data serialization is something you‚Äôll encounter frequently. Let‚Äôs break it down and explore the most popular frameworks!\nWhat is Data Serialization? Data serialization is the process of converting data structures or objects into a format that can be easily stored, transferred, or reconstructed later.","tags":null,"title":"An Overview of Data Serialization Frameworks","type":"posts","url":"/posts/dataserializaiton/","weight":0,"wordcount":1153},{"author":null,"categories":null,"content":null,"date":1695652200,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1695652200,"objectID":"1826de55977419699fc6637c544ef375","permalink":"http://localhost:1313/posts/columnorientedstorage/","publishdate":"2023-09-25T20:00:00+05:30","readingtime":6,"relpermalink":"/posts/columnorientedstorage/","section":"posts","summary":"Hey everyone, it‚Äôs alanturrr1703 back again with another blog post! üòÑ Today, we‚Äôll be exploring a fascinating concept in the world of databases: Column-Oriented Storage. If you‚Äôve ever wondered how big data platforms and analytical systems handle huge volumes of data efficiently, column-oriented storage is a big part of that answer.\nLet‚Äôs dive right in!\nWhat is Column-Oriented Storage? In traditional databases, most of us are familiar with row-oriented storage, where data is stored row by row.","tags":null,"title":"What is Column-Oriented Storage in Databases?","type":"posts","url":"/posts/columnorientedstorage/","weight":0,"wordcount":1188},{"author":null,"categories":null,"content":null,"date":1694871000,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1694871000,"objectID":"f7f04e795463e4e872febe8142a68aa1","permalink":"http://localhost:1313/posts/serializablesnapshotisolation/","publishdate":"2023-09-16T19:00:00+05:30","readingtime":6,"relpermalink":"/posts/serializablesnapshotisolation/","section":"posts","summary":"Hey everyone, it‚Äôs alanturrr1703 back again! üòÑ In today‚Äôs blog, we‚Äôre diving into Serializable Snapshot Isolation (SSI)‚Äîa powerful and advanced database isolation level that offers the benefits of both Snapshot Isolation (SI) and Serializability.\nIf you‚Äôve been following along with my blogs about isolation levels and concurrency control, SSI is the perfect next step in understanding how modern databases handle transactions efficiently and safely. Let‚Äôs jump right in!\nWhat is Snapshot Isolation?","tags":null,"title":"Understanding Serializable Snapshot Isolation in Databases","type":"posts","url":"/posts/serializablesnapshotisolation/","weight":0,"wordcount":1175},{"author":null,"categories":null,"content":null,"date":1694521800,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1694521800,"objectID":"dac785f676efdd44afcf53e934ed51c4","permalink":"http://localhost:1313/posts/twophaselockingsystem/","publishdate":"2023-09-12T18:00:00+05:30","readingtime":6,"relpermalink":"/posts/twophaselockingsystem/","section":"posts","summary":"Hey everyone, it‚Äôs alanturrr1703 back again with another blog! üòÅ Today, we‚Äôre diving into the concept of Two-Phase Locking (2PL)‚Äîa fundamental technique used to maintain concurrency control in databases. If you‚Äôve been curious about how databases handle multiple transactions while keeping everything consistent, this is for you. Let\u0026rsquo;s break it down!\nWhat is Two-Phase Locking? Two-Phase Locking (2PL) is a protocol used by database management systems to ensure serializability, which is the highest level of transaction isolation.","tags":null,"title":"Understanding Two-Phase Locking in Databases","type":"posts","url":"/posts/twophaselockingsystem/","weight":0,"wordcount":1148},{"author":null,"categories":null,"content":null,"date":1694259000,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1694259000,"objectID":"4459fa0a033c3c46eee4d816ce3bf28e","permalink":"http://localhost:1313/posts/serialexecution/","publishdate":"2023-09-09T17:00:00+05:30","readingtime":5,"relpermalink":"/posts/serialexecution/","section":"posts","summary":"Hey everyone, it‚Äôs alanturrr1703 back again! üòÑ In today‚Äôs blog, we‚Äôre going to talk about something fundamental to databases: Serial Execution. If you\u0026rsquo;ve been following along with my posts about isolation levels, concurrency issues like write skew and phantom writes, then understanding serial execution will give you a solid foundation on how databases ensure data consistency.\nLet‚Äôs dive right in!\nWhat is Serial Execution? Serial Execution in the context of databases refers to running transactions one at a time in sequence, without any overlap.","tags":null,"title":"What is Serial Execution in Databases?","type":"posts","url":"/posts/serialexecution/","weight":0,"wordcount":921},{"author":null,"categories":null,"content":null,"date":1693996200,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1693996200,"objectID":"c1b29b197220d1731a2a010114c77f3b","permalink":"http://localhost:1313/posts/writeskewandphantomwrites/","publishdate":"2023-09-06T16:00:00+05:30","readingtime":5,"relpermalink":"/posts/writeskewandphantomwrites/","section":"posts","summary":"Hey everyone, it\u0026rsquo;s alanturrr1703 back with another blog! üòÑ Today, we‚Äôll be tackling two advanced phenomena in databases: Write Skew and Phantom Writes. If you‚Äôre familiar with isolation levels and database transactions, understanding these concepts will help you dig deeper into potential concurrency issues. Let‚Äôs dive in!\nThe Problem with Concurrency When multiple transactions run at the same time in a database, they can interact with each other in unexpected ways.","tags":null,"title":"Write Skew vs Phantom Writes in Databases","type":"posts","url":"/posts/writeskewandphantomwrites/","weight":0,"wordcount":972},{"author":null,"categories":null,"content":null,"date":1693560600,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1693560600,"objectID":"f6549ed5a7d156e43d4123f1c5952646","permalink":"http://localhost:1313/posts/snapshotisolationreadcommitisolation/","publishdate":"2023-09-01T15:00:00+05:30","readingtime":4,"relpermalink":"/posts/snapshotisolationreadcommitisolation/","section":"posts","summary":"Hey everyone, it‚Äôs alanturrr1703 back again with another blog post! üòÑ Today, we‚Äôll be diving into two important isolation levels in databases‚ÄîSnapshot Isolation and Read Committed Isolation.\nThese two terms might sound technical, but they play a huge role in how databases handle concurrent transactions. Whether you‚Äôre a developer working with databases or just curious, understanding these isolation levels is key to ensuring data integrity.\nLet‚Äôs break them down! üìö","tags":null,"title":"Snapshot Isolation vs Read Committed Isolation in Databases","type":"posts","url":"/posts/snapshotisolationreadcommitisolation/","weight":0,"wordcount":847},{"author":null,"categories":null,"content":null,"date":1693119600,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1693119600,"objectID":"c15054f28d1648af32abd4899ce07530","permalink":"http://localhost:1313/posts/introtoacidproperties/","publishdate":"2023-08-27T12:30:00+05:30","readingtime":3,"relpermalink":"/posts/introtoacidproperties/","section":"posts","summary":"Hey everyone, it\u0026rsquo;s alanturrr1703 back again with another blog! This time, we‚Äôll be exploring something essential in the world of databases‚ÄîACID properties.\nIf you\u0026rsquo;ve ever wondered what keeps your database transactions safe and consistent, this blog is for you! Let\u0026rsquo;s break it down and understand these important properties. üåü\nWhat Are ACID Properties? ACID is an acronym for Atomicity, Consistency, Isolation, and Durability. These are the key principles that govern the reliability and integrity of database transactions.","tags":null,"title":"Introduction to ACID Properties in Databases","type":"posts","url":"/posts/introtoacidproperties/","weight":0,"wordcount":585},{"author":null,"categories":null,"content":null,"date":1692771651,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1692771651,"objectID":"190b4a9ec3dbf89511e7d69579573a24","permalink":"http://localhost:1313/posts/databasedesignwithbtrees/","publishdate":"2023-08-23T11:50:51+05:30","readingtime":6,"relpermalink":"/posts/databasedesignwithbtrees/","section":"posts","summary":"Hi guys, it‚Äôs alanturrr1703 again.\nI‚Äôm back with another blog, and this time, we‚Äôre diving deep into the world of B-Trees, one of the most fundamental data structures in database design. This one‚Äôs going to be a bit longer, so grab a snack and settle in.\nWhat Are B-Trees? Let‚Äôs start with the basics‚Äîwhat exactly is a B-Tree?\nA B-Tree is a self-balancing tree data structure that maintains sorted data and allows searches, sequential access, insertions, and deletions in logarithmic time.","tags":null,"title":"Database Design Using B-Trees","type":"posts","url":"/posts/databasedesignwithbtrees/","weight":0,"wordcount":1229},{"author":null,"categories":null,"content":null,"date":1692512451,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1692512451,"objectID":"8a36f28d5dba9e53caeeb4711b8f2f96","permalink":"http://localhost:1313/posts/databasedesignusinglsmtreesandsstables/","publishdate":"2023-08-20T11:50:51+05:30","readingtime":2,"relpermalink":"/posts/databasedesignusinglsmtreesandsstables/","section":"posts","summary":"Hey everyone, it\u0026rsquo;s alanturrr1703 here again.\nI‚Äôm back with another blog post for you all. In my last post, I talked about hash indexes. Today, let‚Äôs jump into something else that‚Äôs also cool: LSM Trees \u0026amp; SSTables!\nWhat Are LSM Trees and SSTables? LSM Trees (which stands for Log-Structured Merge) is a type of data structure that‚Äôs really simple but great for writing. Unlike traditional databases that write data directly to disk, an LSM Tree writes to an in-memory buffer first.","tags":null,"title":"Database Design Using LSM Trees and SSTables","type":"posts","url":"/posts/databasedesignusinglsmtreesandsstables/","weight":0,"wordcount":397},{"author":null,"categories":null,"content":null,"date":1692339651,"description":"","dir":"posts\\","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1692339651,"objectID":"4f6bf462be6eed0d257563579df7b40a","permalink":"http://localhost:1313/posts/databasedesignusinghashmaps/","publishdate":"2023-08-18T11:50:51+05:30","readingtime":3,"relpermalink":"/posts/databasedesignusinghashmaps/","section":"posts","summary":"Hi guys, this is alanturrr1703.\nThis is my first blog, and honestly, I don‚Äôt know what I‚Äôm doing. But I‚Äôll be writing these just for fun; some blogs might actually have some good points that could be useful to someone, but honestly, these blogs are my notes about things that I‚Äôm interested in.\nWhy Do We Need Databases? Let‚Äôs dive into database design using Hash Indexes.\nNow, why do we really need databases?","tags":null,"title":"Database Design Using Hash Indexes","type":"posts","url":"/posts/databasedesignusinghashmaps/","weight":0,"wordcount":596}]